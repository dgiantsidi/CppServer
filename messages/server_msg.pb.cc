// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg.proto

#include "server_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tutorial {
PROTOBUF_CONSTEXPR ServerReqMsg_KV::ServerReqMsg_KV(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.key_sz_)*/0
  , /*decltype(_impl_.value_sz_)*/0} {}
struct ServerReqMsg_KVDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerReqMsg_KVDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerReqMsg_KVDefaultTypeInternal() {}
  union {
    ServerReqMsg_KV _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerReqMsg_KVDefaultTypeInternal _ServerReqMsg_KV_default_instance_;
PROTOBUF_CONSTEXPR ServerReqMsg_Req::ServerReqMsg_Req(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.kv_pair_)*/nullptr
  , /*decltype(_impl_.rtype_)*/0} {}
struct ServerReqMsg_ReqDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerReqMsg_ReqDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerReqMsg_ReqDefaultTypeInternal() {}
  union {
    ServerReqMsg_Req _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerReqMsg_ReqDefaultTypeInternal _ServerReqMsg_Req_default_instance_;
PROTOBUF_CONSTEXPR ServerReqMsg_Msg::ServerReqMsg_Msg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.rtype_)*/{}
  , /*decltype(_impl_.seq_)*/int64_t{0}} {}
struct ServerReqMsg_MsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerReqMsg_MsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerReqMsg_MsgDefaultTypeInternal() {}
  union {
    ServerReqMsg_Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerReqMsg_MsgDefaultTypeInternal _ServerReqMsg_Msg_default_instance_;
PROTOBUF_CONSTEXPR ServerReqMsg::ServerReqMsg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.msg_)*/nullptr} {}
struct ServerReqMsgDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerReqMsgDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerReqMsgDefaultTypeInternal() {}
  union {
    ServerReqMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerReqMsgDefaultTypeInternal _ServerReqMsg_default_instance_;
}  // namespace tutorial
static ::_pb::Metadata file_level_metadata_server_5fmsg_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_5fmsg_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_5fmsg_2eproto = nullptr;

const uint32_t TableStruct_server_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _impl_.key_sz_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _impl_.value_sz_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_KV, _impl_.value_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Req, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Req, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Req, _impl_.rtype_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Req, _impl_.kv_pair_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Msg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Msg, _impl_.seq_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg_Msg, _impl_.rtype_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tutorial::ServerReqMsg, _impl_.msg_),
  0,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::tutorial::ServerReqMsg_KV)},
  { 14, 22, -1, sizeof(::tutorial::ServerReqMsg_Req)},
  { 24, 32, -1, sizeof(::tutorial::ServerReqMsg_Msg)},
  { 34, 41, -1, sizeof(::tutorial::ServerReqMsg)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tutorial::_ServerReqMsg_KV_default_instance_._instance,
  &::tutorial::_ServerReqMsg_Req_default_instance_._instance,
  &::tutorial::_ServerReqMsg_Msg_default_instance_._instance,
  &::tutorial::_ServerReqMsg_default_instance_._instance,
};

const char descriptor_table_protodef_server_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020server_msg.proto\022\010tutorial\"\304\002\n\014ServerR"
  "eqMsg\022\'\n\003msg\030\001 \002(\0132\032.tutorial.ServerReqM"
  "sg.Msg\032B\n\002KV\022\016\n\006key_sz\030\001 \002(\005\022\020\n\010value_sz"
  "\030\002 \002(\005\022\013\n\003key\030\003 \002(\t\022\r\n\005value\030\004 \002(\t\032`\n\003Re"
  "q\022-\n\005rtype\030\001 \002(\0162\036.tutorial.ServerReqMsg"
  ".ReqType\022*\n\007kv_pair\030\002 \002(\0132\031.tutorial.Ser"
  "verReqMsg.KV\032=\n\003Msg\022\013\n\003seq\030\001 \002(\003\022)\n\005rtyp"
  "e\030\002 \003(\0132\032.tutorial.ServerReqMsg.Req\"&\n\007R"
  "eqType\022\007\n\003PUT\020\000\022\007\n\003GET\020\001\022\t\n\005EMPTY\020\002"
  ;
static ::_pbi::once_flag descriptor_table_server_5fmsg_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_5fmsg_2eproto = {
    false, false, 355, descriptor_table_protodef_server_5fmsg_2eproto,
    "server_msg.proto",
    &descriptor_table_server_5fmsg_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_server_5fmsg_2eproto::offsets,
    file_level_metadata_server_5fmsg_2eproto, file_level_enum_descriptors_server_5fmsg_2eproto,
    file_level_service_descriptors_server_5fmsg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_5fmsg_2eproto_getter() {
  return &descriptor_table_server_5fmsg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_5fmsg_2eproto(&descriptor_table_server_5fmsg_2eproto);
namespace tutorial {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerReqMsg_ReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmsg_2eproto);
  return file_level_enum_descriptors_server_5fmsg_2eproto[0];
}
bool ServerReqMsg_ReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerReqMsg_ReqType ServerReqMsg::PUT;
constexpr ServerReqMsg_ReqType ServerReqMsg::GET;
constexpr ServerReqMsg_ReqType ServerReqMsg::EMPTY;
constexpr ServerReqMsg_ReqType ServerReqMsg::ReqType_MIN;
constexpr ServerReqMsg_ReqType ServerReqMsg::ReqType_MAX;
constexpr int ServerReqMsg::ReqType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ServerReqMsg_KV::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerReqMsg_KV>()._impl_._has_bits_);
  static void set_has_key_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_value_sz(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ServerReqMsg_KV::ServerReqMsg_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.ServerReqMsg.KV)
}
ServerReqMsg_KV::ServerReqMsg_KV(const ServerReqMsg_KV& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerReqMsg_KV* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_sz_){}
    , decltype(_impl_.value_sz_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_key()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_value()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.key_sz_, &from._impl_.key_sz_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.value_sz_) -
    reinterpret_cast<char*>(&_impl_.key_sz_)) + sizeof(_impl_.value_sz_));
  // @@protoc_insertion_point(copy_constructor:tutorial.ServerReqMsg.KV)
}

inline void ServerReqMsg_KV::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.key_sz_){0}
    , decltype(_impl_.value_sz_){0}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerReqMsg_KV::~ServerReqMsg_KV() {
  // @@protoc_insertion_point(destructor:tutorial.ServerReqMsg.KV)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerReqMsg_KV::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void ServerReqMsg_KV::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerReqMsg_KV::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.ServerReqMsg.KV)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.value_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.key_sz_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.value_sz_) -
        reinterpret_cast<char*>(&_impl_.key_sz_)) + sizeof(_impl_.value_sz_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerReqMsg_KV::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 key_sz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_key_sz(&has_bits);
          _impl_.key_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 value_sz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_value_sz(&has_bits);
          _impl_.value_sz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.ServerReqMsg.KV.key");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // required string value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tutorial.ServerReqMsg.KV.value");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerReqMsg_KV::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.ServerReqMsg.KV)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int32 key_sz = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_key_sz(), target);
  }

  // required int32 value_sz = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_value_sz(), target);
  }

  // required string key = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.ServerReqMsg.KV.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // required string value = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tutorial.ServerReqMsg.KV.value");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.ServerReqMsg.KV)
  return target;
}

size_t ServerReqMsg_KV::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.ServerReqMsg.KV)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_key_sz()) {
    // required int32 key_sz = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_sz());
  }

  if (_internal_has_value_sz()) {
    // required int32 value_sz = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value_sz());
  }

  return total_size;
}
size_t ServerReqMsg_KV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.ServerReqMsg.KV)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string key = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required int32 key_sz = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_key_sz());

    // required int32 value_sz = 2;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value_sz());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerReqMsg_KV::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerReqMsg_KV::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerReqMsg_KV::GetClassData() const { return &_class_data_; }


void ServerReqMsg_KV::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerReqMsg_KV*>(&to_msg);
  auto& from = static_cast<const ServerReqMsg_KV&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.ServerReqMsg.KV)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.key_sz_ = from._impl_.key_sz_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.value_sz_ = from._impl_.value_sz_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerReqMsg_KV::CopyFrom(const ServerReqMsg_KV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.ServerReqMsg.KV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqMsg_KV::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void ServerReqMsg_KV::InternalSwap(ServerReqMsg_KV* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerReqMsg_KV, _impl_.value_sz_)
      + sizeof(ServerReqMsg_KV::_impl_.value_sz_)
      - PROTOBUF_FIELD_OFFSET(ServerReqMsg_KV, _impl_.key_sz_)>(
          reinterpret_cast<char*>(&_impl_.key_sz_),
          reinterpret_cast<char*>(&other->_impl_.key_sz_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReqMsg_KV::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmsg_2eproto_getter, &descriptor_table_server_5fmsg_2eproto_once,
      file_level_metadata_server_5fmsg_2eproto[0]);
}

// ===================================================================

class ServerReqMsg_Req::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerReqMsg_Req>()._impl_._has_bits_);
  static void set_has_rtype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::tutorial::ServerReqMsg_KV& kv_pair(const ServerReqMsg_Req* msg);
  static void set_has_kv_pair(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::tutorial::ServerReqMsg_KV&
ServerReqMsg_Req::_Internal::kv_pair(const ServerReqMsg_Req* msg) {
  return *msg->_impl_.kv_pair_;
}
ServerReqMsg_Req::ServerReqMsg_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.ServerReqMsg.Req)
}
ServerReqMsg_Req::ServerReqMsg_Req(const ServerReqMsg_Req& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerReqMsg_Req* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kv_pair_){nullptr}
    , decltype(_impl_.rtype_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv_pair()) {
    _this->_impl_.kv_pair_ = new ::tutorial::ServerReqMsg_KV(*from._impl_.kv_pair_);
  }
  _this->_impl_.rtype_ = from._impl_.rtype_;
  // @@protoc_insertion_point(copy_constructor:tutorial.ServerReqMsg.Req)
}

inline void ServerReqMsg_Req::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.kv_pair_){nullptr}
    , decltype(_impl_.rtype_){0}
  };
}

ServerReqMsg_Req::~ServerReqMsg_Req() {
  // @@protoc_insertion_point(destructor:tutorial.ServerReqMsg.Req)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerReqMsg_Req::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_pair_;
}

void ServerReqMsg_Req::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerReqMsg_Req::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.ServerReqMsg.Req)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.kv_pair_ != nullptr);
    _impl_.kv_pair_->Clear();
  }
  _impl_.rtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerReqMsg_Req::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .tutorial.ServerReqMsg.ReqType rtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::tutorial::ServerReqMsg_ReqType_IsValid(val))) {
            _internal_set_rtype(static_cast<::tutorial::ServerReqMsg_ReqType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // required .tutorial.ServerReqMsg.KV kv_pair = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv_pair(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerReqMsg_Req::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.ServerReqMsg.Req)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .tutorial.ServerReqMsg.ReqType rtype = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_rtype(), target);
  }

  // required .tutorial.ServerReqMsg.KV kv_pair = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::kv_pair(this),
        _Internal::kv_pair(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.ServerReqMsg.Req)
  return target;
}

size_t ServerReqMsg_Req::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:tutorial.ServerReqMsg.Req)
  size_t total_size = 0;

  if (_internal_has_kv_pair()) {
    // required .tutorial.ServerReqMsg.KV kv_pair = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_pair_);
  }

  if (_internal_has_rtype()) {
    // required .tutorial.ServerReqMsg.ReqType rtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rtype());
  }

  return total_size;
}
size_t ServerReqMsg_Req::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.ServerReqMsg.Req)
  size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .tutorial.ServerReqMsg.KV kv_pair = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_pair_);

    // required .tutorial.ServerReqMsg.ReqType rtype = 1;
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_rtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerReqMsg_Req::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerReqMsg_Req::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerReqMsg_Req::GetClassData() const { return &_class_data_; }


void ServerReqMsg_Req::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerReqMsg_Req*>(&to_msg);
  auto& from = static_cast<const ServerReqMsg_Req&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.ServerReqMsg.Req)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_kv_pair()->::tutorial::ServerReqMsg_KV::MergeFrom(
          from._internal_kv_pair());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.rtype_ = from._impl_.rtype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerReqMsg_Req::CopyFrom(const ServerReqMsg_Req& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.ServerReqMsg.Req)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqMsg_Req::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_kv_pair()) {
    if (!_impl_.kv_pair_->IsInitialized()) return false;
  }
  return true;
}

void ServerReqMsg_Req::InternalSwap(ServerReqMsg_Req* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerReqMsg_Req, _impl_.rtype_)
      + sizeof(ServerReqMsg_Req::_impl_.rtype_)
      - PROTOBUF_FIELD_OFFSET(ServerReqMsg_Req, _impl_.kv_pair_)>(
          reinterpret_cast<char*>(&_impl_.kv_pair_),
          reinterpret_cast<char*>(&other->_impl_.kv_pair_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReqMsg_Req::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmsg_2eproto_getter, &descriptor_table_server_5fmsg_2eproto_once,
      file_level_metadata_server_5fmsg_2eproto[1]);
}

// ===================================================================

class ServerReqMsg_Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerReqMsg_Msg>()._impl_._has_bits_);
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ServerReqMsg_Msg::ServerReqMsg_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.ServerReqMsg.Msg)
}
ServerReqMsg_Msg::ServerReqMsg_Msg(const ServerReqMsg_Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerReqMsg_Msg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtype_){from._impl_.rtype_}
    , decltype(_impl_.seq_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.seq_ = from._impl_.seq_;
  // @@protoc_insertion_point(copy_constructor:tutorial.ServerReqMsg.Msg)
}

inline void ServerReqMsg_Msg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.rtype_){arena}
    , decltype(_impl_.seq_){int64_t{0}}
  };
}

ServerReqMsg_Msg::~ServerReqMsg_Msg() {
  // @@protoc_insertion_point(destructor:tutorial.ServerReqMsg.Msg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerReqMsg_Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.rtype_.~RepeatedPtrField();
}

void ServerReqMsg_Msg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerReqMsg_Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.ServerReqMsg.Msg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rtype_.Clear();
  _impl_.seq_ = int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerReqMsg_Msg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int64 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seq(&has_bits);
          _impl_.seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tutorial.ServerReqMsg.Req rtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rtype(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerReqMsg_Msg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.ServerReqMsg.Msg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required int64 seq = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_seq(), target);
  }

  // repeated .tutorial.ServerReqMsg.Req rtype = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_rtype_size()); i < n; i++) {
    const auto& repfield = this->_internal_rtype(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.ServerReqMsg.Msg)
  return target;
}

size_t ServerReqMsg_Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.ServerReqMsg.Msg)
  size_t total_size = 0;

  // required int64 seq = 1;
  if (_internal_has_seq()) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_seq());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tutorial.ServerReqMsg.Req rtype = 2;
  total_size += 1UL * this->_internal_rtype_size();
  for (const auto& msg : this->_impl_.rtype_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerReqMsg_Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerReqMsg_Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerReqMsg_Msg::GetClassData() const { return &_class_data_; }


void ServerReqMsg_Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerReqMsg_Msg*>(&to_msg);
  auto& from = static_cast<const ServerReqMsg_Msg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.ServerReqMsg.Msg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.rtype_.MergeFrom(from._impl_.rtype_);
  if (from._internal_has_seq()) {
    _this->_internal_set_seq(from._internal_seq());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerReqMsg_Msg::CopyFrom(const ServerReqMsg_Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.ServerReqMsg.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqMsg_Msg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.rtype_))
    return false;
  return true;
}

void ServerReqMsg_Msg::InternalSwap(ServerReqMsg_Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rtype_.InternalSwap(&other->_impl_.rtype_);
  swap(_impl_.seq_, other->_impl_.seq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReqMsg_Msg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmsg_2eproto_getter, &descriptor_table_server_5fmsg_2eproto_once,
      file_level_metadata_server_5fmsg_2eproto[2]);
}

// ===================================================================

class ServerReqMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerReqMsg>()._impl_._has_bits_);
  static const ::tutorial::ServerReqMsg_Msg& msg(const ServerReqMsg* msg);
  static void set_has_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::tutorial::ServerReqMsg_Msg&
ServerReqMsg::_Internal::msg(const ServerReqMsg* msg) {
  return *msg->_impl_.msg_;
}
ServerReqMsg::ServerReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tutorial.ServerReqMsg)
}
ServerReqMsg::ServerReqMsg(const ServerReqMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerReqMsg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_msg()) {
    _this->_impl_.msg_ = new ::tutorial::ServerReqMsg_Msg(*from._impl_.msg_);
  }
  // @@protoc_insertion_point(copy_constructor:tutorial.ServerReqMsg)
}

inline void ServerReqMsg::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.msg_){nullptr}
  };
}

ServerReqMsg::~ServerReqMsg() {
  // @@protoc_insertion_point(destructor:tutorial.ServerReqMsg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerReqMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.msg_;
}

void ServerReqMsg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerReqMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tutorial.ServerReqMsg)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.msg_ != nullptr);
    _impl_.msg_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerReqMsg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .tutorial.ServerReqMsg.Msg msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerReqMsg::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.ServerReqMsg)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .tutorial.ServerReqMsg.Msg msg = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::msg(this),
        _Internal::msg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.ServerReqMsg)
  return target;
}

size_t ServerReqMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tutorial.ServerReqMsg)
  size_t total_size = 0;

  // required .tutorial.ServerReqMsg.Msg msg = 1;
  if (_internal_has_msg()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.msg_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerReqMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerReqMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerReqMsg::GetClassData() const { return &_class_data_; }


void ServerReqMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerReqMsg*>(&to_msg);
  auto& from = static_cast<const ServerReqMsg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tutorial.ServerReqMsg)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg()) {
    _this->_internal_mutable_msg()->::tutorial::ServerReqMsg_Msg::MergeFrom(
        from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerReqMsg::CopyFrom(const ServerReqMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tutorial.ServerReqMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerReqMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_msg()) {
    if (!_impl_.msg_->IsInitialized()) return false;
  }
  return true;
}

void ServerReqMsg::InternalSwap(ServerReqMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.msg_, other->_impl_.msg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerReqMsg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmsg_2eproto_getter, &descriptor_table_server_5fmsg_2eproto_once,
      file_level_metadata_server_5fmsg_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tutorial::ServerReqMsg_KV*
Arena::CreateMaybeMessage< ::tutorial::ServerReqMsg_KV >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::ServerReqMsg_KV >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::ServerReqMsg_Req*
Arena::CreateMaybeMessage< ::tutorial::ServerReqMsg_Req >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::ServerReqMsg_Req >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::ServerReqMsg_Msg*
Arena::CreateMaybeMessage< ::tutorial::ServerReqMsg_Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::ServerReqMsg_Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::tutorial::ServerReqMsg*
Arena::CreateMaybeMessage< ::tutorial::ServerReqMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tutorial::ServerReqMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
