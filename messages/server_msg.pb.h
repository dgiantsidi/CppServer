// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_server_5fmsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_server_5fmsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_server_5fmsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_server_5fmsg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_server_5fmsg_2eproto;
namespace tutorial {
class ServerReqMsg;
struct ServerReqMsgDefaultTypeInternal;
extern ServerReqMsgDefaultTypeInternal _ServerReqMsg_default_instance_;
class ServerReqMsg_KV;
struct ServerReqMsg_KVDefaultTypeInternal;
extern ServerReqMsg_KVDefaultTypeInternal _ServerReqMsg_KV_default_instance_;
class ServerReqMsg_Msg;
struct ServerReqMsg_MsgDefaultTypeInternal;
extern ServerReqMsg_MsgDefaultTypeInternal _ServerReqMsg_Msg_default_instance_;
class ServerReqMsg_Req;
struct ServerReqMsg_ReqDefaultTypeInternal;
extern ServerReqMsg_ReqDefaultTypeInternal _ServerReqMsg_Req_default_instance_;
}  // namespace tutorial
PROTOBUF_NAMESPACE_OPEN
template<> ::tutorial::ServerReqMsg* Arena::CreateMaybeMessage<::tutorial::ServerReqMsg>(Arena*);
template<> ::tutorial::ServerReqMsg_KV* Arena::CreateMaybeMessage<::tutorial::ServerReqMsg_KV>(Arena*);
template<> ::tutorial::ServerReqMsg_Msg* Arena::CreateMaybeMessage<::tutorial::ServerReqMsg_Msg>(Arena*);
template<> ::tutorial::ServerReqMsg_Req* Arena::CreateMaybeMessage<::tutorial::ServerReqMsg_Req>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tutorial {

enum ServerReqMsg_ReqType : int {
  ServerReqMsg_ReqType_PUT = 0,
  ServerReqMsg_ReqType_GET = 1,
  ServerReqMsg_ReqType_EMPTY = 2
};
bool ServerReqMsg_ReqType_IsValid(int value);
constexpr ServerReqMsg_ReqType ServerReqMsg_ReqType_ReqType_MIN = ServerReqMsg_ReqType_PUT;
constexpr ServerReqMsg_ReqType ServerReqMsg_ReqType_ReqType_MAX = ServerReqMsg_ReqType_EMPTY;
constexpr int ServerReqMsg_ReqType_ReqType_ARRAYSIZE = ServerReqMsg_ReqType_ReqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServerReqMsg_ReqType_descriptor();
template<typename T>
inline const std::string& ServerReqMsg_ReqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerReqMsg_ReqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerReqMsg_ReqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServerReqMsg_ReqType_descriptor(), enum_t_value);
}
inline bool ServerReqMsg_ReqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerReqMsg_ReqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServerReqMsg_ReqType>(
    ServerReqMsg_ReqType_descriptor(), name, value);
}
// ===================================================================

class ServerReqMsg_KV final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.ServerReqMsg.KV) */ {
 public:
  inline ServerReqMsg_KV() : ServerReqMsg_KV(nullptr) {}
  ~ServerReqMsg_KV() override;
  explicit PROTOBUF_CONSTEXPR ServerReqMsg_KV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReqMsg_KV(const ServerReqMsg_KV& from);
  ServerReqMsg_KV(ServerReqMsg_KV&& from) noexcept
    : ServerReqMsg_KV() {
    *this = ::std::move(from);
  }

  inline ServerReqMsg_KV& operator=(const ServerReqMsg_KV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReqMsg_KV& operator=(ServerReqMsg_KV&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReqMsg_KV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerReqMsg_KV* internal_default_instance() {
    return reinterpret_cast<const ServerReqMsg_KV*>(
               &_ServerReqMsg_KV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerReqMsg_KV& a, ServerReqMsg_KV& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReqMsg_KV* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReqMsg_KV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReqMsg_KV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReqMsg_KV>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReqMsg_KV& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReqMsg_KV& from) {
    ServerReqMsg_KV::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReqMsg_KV* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.ServerReqMsg.KV";
  }
  protected:
  explicit ServerReqMsg_KV(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kValueFieldNumber = 4,
    kKeySzFieldNumber = 1,
    kValueSzFieldNumber = 2,
  };
  // required string key = 3;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required int32 key_sz = 1;
  bool has_key_sz() const;
  private:
  bool _internal_has_key_sz() const;
  public:
  void clear_key_sz();
  int32_t key_sz() const;
  void set_key_sz(int32_t value);
  private:
  int32_t _internal_key_sz() const;
  void _internal_set_key_sz(int32_t value);
  public:

  // required int32 value_sz = 2;
  bool has_value_sz() const;
  private:
  bool _internal_has_value_sz() const;
  public:
  void clear_value_sz();
  int32_t value_sz() const;
  void set_value_sz(int32_t value);
  private:
  int32_t _internal_value_sz() const;
  void _internal_set_value_sz(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.ServerReqMsg.KV)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
    int32_t key_sz_;
    int32_t value_sz_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServerReqMsg_Req final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.ServerReqMsg.Req) */ {
 public:
  inline ServerReqMsg_Req() : ServerReqMsg_Req(nullptr) {}
  ~ServerReqMsg_Req() override;
  explicit PROTOBUF_CONSTEXPR ServerReqMsg_Req(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReqMsg_Req(const ServerReqMsg_Req& from);
  ServerReqMsg_Req(ServerReqMsg_Req&& from) noexcept
    : ServerReqMsg_Req() {
    *this = ::std::move(from);
  }

  inline ServerReqMsg_Req& operator=(const ServerReqMsg_Req& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReqMsg_Req& operator=(ServerReqMsg_Req&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReqMsg_Req& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerReqMsg_Req* internal_default_instance() {
    return reinterpret_cast<const ServerReqMsg_Req*>(
               &_ServerReqMsg_Req_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerReqMsg_Req& a, ServerReqMsg_Req& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReqMsg_Req* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReqMsg_Req* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReqMsg_Req* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReqMsg_Req>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReqMsg_Req& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReqMsg_Req& from) {
    ServerReqMsg_Req::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReqMsg_Req* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.ServerReqMsg.Req";
  }
  protected:
  explicit ServerReqMsg_Req(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKvPairFieldNumber = 2,
    kRtypeFieldNumber = 1,
  };
  // required .tutorial.ServerReqMsg.KV kv_pair = 2;
  bool has_kv_pair() const;
  private:
  bool _internal_has_kv_pair() const;
  public:
  void clear_kv_pair();
  const ::tutorial::ServerReqMsg_KV& kv_pair() const;
  PROTOBUF_NODISCARD ::tutorial::ServerReqMsg_KV* release_kv_pair();
  ::tutorial::ServerReqMsg_KV* mutable_kv_pair();
  void set_allocated_kv_pair(::tutorial::ServerReqMsg_KV* kv_pair);
  private:
  const ::tutorial::ServerReqMsg_KV& _internal_kv_pair() const;
  ::tutorial::ServerReqMsg_KV* _internal_mutable_kv_pair();
  public:
  void unsafe_arena_set_allocated_kv_pair(
      ::tutorial::ServerReqMsg_KV* kv_pair);
  ::tutorial::ServerReqMsg_KV* unsafe_arena_release_kv_pair();

  // required .tutorial.ServerReqMsg.ReqType rtype = 1;
  bool has_rtype() const;
  private:
  bool _internal_has_rtype() const;
  public:
  void clear_rtype();
  ::tutorial::ServerReqMsg_ReqType rtype() const;
  void set_rtype(::tutorial::ServerReqMsg_ReqType value);
  private:
  ::tutorial::ServerReqMsg_ReqType _internal_rtype() const;
  void _internal_set_rtype(::tutorial::ServerReqMsg_ReqType value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.ServerReqMsg.Req)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tutorial::ServerReqMsg_KV* kv_pair_;
    int rtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServerReqMsg_Msg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.ServerReqMsg.Msg) */ {
 public:
  inline ServerReqMsg_Msg() : ServerReqMsg_Msg(nullptr) {}
  ~ServerReqMsg_Msg() override;
  explicit PROTOBUF_CONSTEXPR ServerReqMsg_Msg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReqMsg_Msg(const ServerReqMsg_Msg& from);
  ServerReqMsg_Msg(ServerReqMsg_Msg&& from) noexcept
    : ServerReqMsg_Msg() {
    *this = ::std::move(from);
  }

  inline ServerReqMsg_Msg& operator=(const ServerReqMsg_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReqMsg_Msg& operator=(ServerReqMsg_Msg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReqMsg_Msg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerReqMsg_Msg* internal_default_instance() {
    return reinterpret_cast<const ServerReqMsg_Msg*>(
               &_ServerReqMsg_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerReqMsg_Msg& a, ServerReqMsg_Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReqMsg_Msg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReqMsg_Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReqMsg_Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReqMsg_Msg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReqMsg_Msg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReqMsg_Msg& from) {
    ServerReqMsg_Msg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReqMsg_Msg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.ServerReqMsg.Msg";
  }
  protected:
  explicit ServerReqMsg_Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtypeFieldNumber = 2,
    kSeqFieldNumber = 1,
  };
  // repeated .tutorial.ServerReqMsg.Req rtype = 2;
  int rtype_size() const;
  private:
  int _internal_rtype_size() const;
  public:
  void clear_rtype();
  ::tutorial::ServerReqMsg_Req* mutable_rtype(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::ServerReqMsg_Req >*
      mutable_rtype();
  private:
  const ::tutorial::ServerReqMsg_Req& _internal_rtype(int index) const;
  ::tutorial::ServerReqMsg_Req* _internal_add_rtype();
  public:
  const ::tutorial::ServerReqMsg_Req& rtype(int index) const;
  ::tutorial::ServerReqMsg_Req* add_rtype();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::ServerReqMsg_Req >&
      rtype() const;

  // required int64 seq = 1;
  bool has_seq() const;
  private:
  bool _internal_has_seq() const;
  public:
  void clear_seq();
  int64_t seq() const;
  void set_seq(int64_t value);
  private:
  int64_t _internal_seq() const;
  void _internal_set_seq(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:tutorial.ServerReqMsg.Msg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::ServerReqMsg_Req > rtype_;
    int64_t seq_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmsg_2eproto;
};
// -------------------------------------------------------------------

class ServerReqMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:tutorial.ServerReqMsg) */ {
 public:
  inline ServerReqMsg() : ServerReqMsg(nullptr) {}
  ~ServerReqMsg() override;
  explicit PROTOBUF_CONSTEXPR ServerReqMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerReqMsg(const ServerReqMsg& from);
  ServerReqMsg(ServerReqMsg&& from) noexcept
    : ServerReqMsg() {
    *this = ::std::move(from);
  }

  inline ServerReqMsg& operator=(const ServerReqMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerReqMsg& operator=(ServerReqMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerReqMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerReqMsg* internal_default_instance() {
    return reinterpret_cast<const ServerReqMsg*>(
               &_ServerReqMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerReqMsg& a, ServerReqMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerReqMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerReqMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerReqMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerReqMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServerReqMsg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ServerReqMsg& from) {
    ServerReqMsg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerReqMsg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tutorial.ServerReqMsg";
  }
  protected:
  explicit ServerReqMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerReqMsg_KV KV;
  typedef ServerReqMsg_Req Req;
  typedef ServerReqMsg_Msg Msg;

  typedef ServerReqMsg_ReqType ReqType;
  static constexpr ReqType PUT =
    ServerReqMsg_ReqType_PUT;
  static constexpr ReqType GET =
    ServerReqMsg_ReqType_GET;
  static constexpr ReqType EMPTY =
    ServerReqMsg_ReqType_EMPTY;
  static inline bool ReqType_IsValid(int value) {
    return ServerReqMsg_ReqType_IsValid(value);
  }
  static constexpr ReqType ReqType_MIN =
    ServerReqMsg_ReqType_ReqType_MIN;
  static constexpr ReqType ReqType_MAX =
    ServerReqMsg_ReqType_ReqType_MAX;
  static constexpr int ReqType_ARRAYSIZE =
    ServerReqMsg_ReqType_ReqType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReqType_descriptor() {
    return ServerReqMsg_ReqType_descriptor();
  }
  template<typename T>
  static inline const std::string& ReqType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReqType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReqType_Name.");
    return ServerReqMsg_ReqType_Name(enum_t_value);
  }
  static inline bool ReqType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ReqType* value) {
    return ServerReqMsg_ReqType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // required .tutorial.ServerReqMsg.Msg msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::tutorial::ServerReqMsg_Msg& msg() const;
  PROTOBUF_NODISCARD ::tutorial::ServerReqMsg_Msg* release_msg();
  ::tutorial::ServerReqMsg_Msg* mutable_msg();
  void set_allocated_msg(::tutorial::ServerReqMsg_Msg* msg);
  private:
  const ::tutorial::ServerReqMsg_Msg& _internal_msg() const;
  ::tutorial::ServerReqMsg_Msg* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::tutorial::ServerReqMsg_Msg* msg);
  ::tutorial::ServerReqMsg_Msg* unsafe_arena_release_msg();

  // @@protoc_insertion_point(class_scope:tutorial.ServerReqMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::tutorial::ServerReqMsg_Msg* msg_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_server_5fmsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerReqMsg_KV

// required int32 key_sz = 1;
inline bool ServerReqMsg_KV::_internal_has_key_sz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ServerReqMsg_KV::has_key_sz() const {
  return _internal_has_key_sz();
}
inline void ServerReqMsg_KV::clear_key_sz() {
  _impl_.key_sz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline int32_t ServerReqMsg_KV::_internal_key_sz() const {
  return _impl_.key_sz_;
}
inline int32_t ServerReqMsg_KV::key_sz() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.KV.key_sz)
  return _internal_key_sz();
}
inline void ServerReqMsg_KV::_internal_set_key_sz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.key_sz_ = value;
}
inline void ServerReqMsg_KV::set_key_sz(int32_t value) {
  _internal_set_key_sz(value);
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.KV.key_sz)
}

// required int32 value_sz = 2;
inline bool ServerReqMsg_KV::_internal_has_value_sz() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ServerReqMsg_KV::has_value_sz() const {
  return _internal_has_value_sz();
}
inline void ServerReqMsg_KV::clear_value_sz() {
  _impl_.value_sz_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline int32_t ServerReqMsg_KV::_internal_value_sz() const {
  return _impl_.value_sz_;
}
inline int32_t ServerReqMsg_KV::value_sz() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.KV.value_sz)
  return _internal_value_sz();
}
inline void ServerReqMsg_KV::_internal_set_value_sz(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.value_sz_ = value;
}
inline void ServerReqMsg_KV::set_value_sz(int32_t value) {
  _internal_set_value_sz(value);
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.KV.value_sz)
}

// required string key = 3;
inline bool ServerReqMsg_KV::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerReqMsg_KV::has_key() const {
  return _internal_has_key();
}
inline void ServerReqMsg_KV::clear_key() {
  _impl_.key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ServerReqMsg_KV::key() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.KV.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerReqMsg_KV::set_key(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.KV.key)
}
inline std::string* ServerReqMsg_KV::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:tutorial.ServerReqMsg.KV.key)
  return _s;
}
inline const std::string& ServerReqMsg_KV::_internal_key() const {
  return _impl_.key_.Get();
}
inline void ServerReqMsg_KV::_internal_set_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReqMsg_KV::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerReqMsg_KV::release_key() {
  // @@protoc_insertion_point(field_release:tutorial.ServerReqMsg.KV.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerReqMsg_KV::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.ServerReqMsg.KV.key)
}

// required string value = 4;
inline bool ServerReqMsg_KV::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerReqMsg_KV::has_value() const {
  return _internal_has_value();
}
inline void ServerReqMsg_KV::clear_value() {
  _impl_.value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ServerReqMsg_KV::value() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.KV.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerReqMsg_KV::set_value(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.KV.value)
}
inline std::string* ServerReqMsg_KV::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:tutorial.ServerReqMsg.KV.value)
  return _s;
}
inline const std::string& ServerReqMsg_KV::_internal_value() const {
  return _impl_.value_.Get();
}
inline void ServerReqMsg_KV::_internal_set_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.value_.Set(value, GetArenaForAllocation());
}
inline std::string* ServerReqMsg_KV::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.value_.Mutable(GetArenaForAllocation());
}
inline std::string* ServerReqMsg_KV::release_value() {
  // @@protoc_insertion_point(field_release:tutorial.ServerReqMsg.KV.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ServerReqMsg_KV::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.value_.IsDefault()) {
    _impl_.value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:tutorial.ServerReqMsg.KV.value)
}

// -------------------------------------------------------------------

// ServerReqMsg_Req

// required .tutorial.ServerReqMsg.ReqType rtype = 1;
inline bool ServerReqMsg_Req::_internal_has_rtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ServerReqMsg_Req::has_rtype() const {
  return _internal_has_rtype();
}
inline void ServerReqMsg_Req::clear_rtype() {
  _impl_.rtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::tutorial::ServerReqMsg_ReqType ServerReqMsg_Req::_internal_rtype() const {
  return static_cast< ::tutorial::ServerReqMsg_ReqType >(_impl_.rtype_);
}
inline ::tutorial::ServerReqMsg_ReqType ServerReqMsg_Req::rtype() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.Req.rtype)
  return _internal_rtype();
}
inline void ServerReqMsg_Req::_internal_set_rtype(::tutorial::ServerReqMsg_ReqType value) {
  assert(::tutorial::ServerReqMsg_ReqType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.rtype_ = value;
}
inline void ServerReqMsg_Req::set_rtype(::tutorial::ServerReqMsg_ReqType value) {
  _internal_set_rtype(value);
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.Req.rtype)
}

// required .tutorial.ServerReqMsg.KV kv_pair = 2;
inline bool ServerReqMsg_Req::_internal_has_kv_pair() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.kv_pair_ != nullptr);
  return value;
}
inline bool ServerReqMsg_Req::has_kv_pair() const {
  return _internal_has_kv_pair();
}
inline void ServerReqMsg_Req::clear_kv_pair() {
  if (_impl_.kv_pair_ != nullptr) _impl_.kv_pair_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::ServerReqMsg_KV& ServerReqMsg_Req::_internal_kv_pair() const {
  const ::tutorial::ServerReqMsg_KV* p = _impl_.kv_pair_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::ServerReqMsg_KV&>(
      ::tutorial::_ServerReqMsg_KV_default_instance_);
}
inline const ::tutorial::ServerReqMsg_KV& ServerReqMsg_Req::kv_pair() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.Req.kv_pair)
  return _internal_kv_pair();
}
inline void ServerReqMsg_Req::unsafe_arena_set_allocated_kv_pair(
    ::tutorial::ServerReqMsg_KV* kv_pair) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.kv_pair_);
  }
  _impl_.kv_pair_ = kv_pair;
  if (kv_pair) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.ServerReqMsg.Req.kv_pair)
}
inline ::tutorial::ServerReqMsg_KV* ServerReqMsg_Req::release_kv_pair() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::ServerReqMsg_KV* temp = _impl_.kv_pair_;
  _impl_.kv_pair_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::ServerReqMsg_KV* ServerReqMsg_Req::unsafe_arena_release_kv_pair() {
  // @@protoc_insertion_point(field_release:tutorial.ServerReqMsg.Req.kv_pair)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::ServerReqMsg_KV* temp = _impl_.kv_pair_;
  _impl_.kv_pair_ = nullptr;
  return temp;
}
inline ::tutorial::ServerReqMsg_KV* ServerReqMsg_Req::_internal_mutable_kv_pair() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.kv_pair_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::ServerReqMsg_KV>(GetArenaForAllocation());
    _impl_.kv_pair_ = p;
  }
  return _impl_.kv_pair_;
}
inline ::tutorial::ServerReqMsg_KV* ServerReqMsg_Req::mutable_kv_pair() {
  ::tutorial::ServerReqMsg_KV* _msg = _internal_mutable_kv_pair();
  // @@protoc_insertion_point(field_mutable:tutorial.ServerReqMsg.Req.kv_pair)
  return _msg;
}
inline void ServerReqMsg_Req::set_allocated_kv_pair(::tutorial::ServerReqMsg_KV* kv_pair) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.kv_pair_;
  }
  if (kv_pair) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(kv_pair);
    if (message_arena != submessage_arena) {
      kv_pair = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kv_pair, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.kv_pair_ = kv_pair;
  // @@protoc_insertion_point(field_set_allocated:tutorial.ServerReqMsg.Req.kv_pair)
}

// -------------------------------------------------------------------

// ServerReqMsg_Msg

// required int64 seq = 1;
inline bool ServerReqMsg_Msg::_internal_has_seq() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ServerReqMsg_Msg::has_seq() const {
  return _internal_has_seq();
}
inline void ServerReqMsg_Msg::clear_seq() {
  _impl_.seq_ = int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline int64_t ServerReqMsg_Msg::_internal_seq() const {
  return _impl_.seq_;
}
inline int64_t ServerReqMsg_Msg::seq() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.Msg.seq)
  return _internal_seq();
}
inline void ServerReqMsg_Msg::_internal_set_seq(int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.seq_ = value;
}
inline void ServerReqMsg_Msg::set_seq(int64_t value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:tutorial.ServerReqMsg.Msg.seq)
}

// repeated .tutorial.ServerReqMsg.Req rtype = 2;
inline int ServerReqMsg_Msg::_internal_rtype_size() const {
  return _impl_.rtype_.size();
}
inline int ServerReqMsg_Msg::rtype_size() const {
  return _internal_rtype_size();
}
inline void ServerReqMsg_Msg::clear_rtype() {
  _impl_.rtype_.Clear();
}
inline ::tutorial::ServerReqMsg_Req* ServerReqMsg_Msg::mutable_rtype(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.ServerReqMsg.Msg.rtype)
  return _impl_.rtype_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::ServerReqMsg_Req >*
ServerReqMsg_Msg::mutable_rtype() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.ServerReqMsg.Msg.rtype)
  return &_impl_.rtype_;
}
inline const ::tutorial::ServerReqMsg_Req& ServerReqMsg_Msg::_internal_rtype(int index) const {
  return _impl_.rtype_.Get(index);
}
inline const ::tutorial::ServerReqMsg_Req& ServerReqMsg_Msg::rtype(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.Msg.rtype)
  return _internal_rtype(index);
}
inline ::tutorial::ServerReqMsg_Req* ServerReqMsg_Msg::_internal_add_rtype() {
  return _impl_.rtype_.Add();
}
inline ::tutorial::ServerReqMsg_Req* ServerReqMsg_Msg::add_rtype() {
  ::tutorial::ServerReqMsg_Req* _add = _internal_add_rtype();
  // @@protoc_insertion_point(field_add:tutorial.ServerReqMsg.Msg.rtype)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tutorial::ServerReqMsg_Req >&
ServerReqMsg_Msg::rtype() const {
  // @@protoc_insertion_point(field_list:tutorial.ServerReqMsg.Msg.rtype)
  return _impl_.rtype_;
}

// -------------------------------------------------------------------

// ServerReqMsg

// required .tutorial.ServerReqMsg.Msg msg = 1;
inline bool ServerReqMsg::_internal_has_msg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_ != nullptr);
  return value;
}
inline bool ServerReqMsg::has_msg() const {
  return _internal_has_msg();
}
inline void ServerReqMsg::clear_msg() {
  if (_impl_.msg_ != nullptr) _impl_.msg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tutorial::ServerReqMsg_Msg& ServerReqMsg::_internal_msg() const {
  const ::tutorial::ServerReqMsg_Msg* p = _impl_.msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::tutorial::ServerReqMsg_Msg&>(
      ::tutorial::_ServerReqMsg_Msg_default_instance_);
}
inline const ::tutorial::ServerReqMsg_Msg& ServerReqMsg::msg() const {
  // @@protoc_insertion_point(field_get:tutorial.ServerReqMsg.msg)
  return _internal_msg();
}
inline void ServerReqMsg::unsafe_arena_set_allocated_msg(
    ::tutorial::ServerReqMsg_Msg* msg) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.msg_);
  }
  _impl_.msg_ = msg;
  if (msg) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tutorial.ServerReqMsg.msg)
}
inline ::tutorial::ServerReqMsg_Msg* ServerReqMsg::release_msg() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::ServerReqMsg_Msg* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::tutorial::ServerReqMsg_Msg* ServerReqMsg::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:tutorial.ServerReqMsg.msg)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tutorial::ServerReqMsg_Msg* temp = _impl_.msg_;
  _impl_.msg_ = nullptr;
  return temp;
}
inline ::tutorial::ServerReqMsg_Msg* ServerReqMsg::_internal_mutable_msg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::tutorial::ServerReqMsg_Msg>(GetArenaForAllocation());
    _impl_.msg_ = p;
  }
  return _impl_.msg_;
}
inline ::tutorial::ServerReqMsg_Msg* ServerReqMsg::mutable_msg() {
  ::tutorial::ServerReqMsg_Msg* _msg = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:tutorial.ServerReqMsg.msg)
  return _msg;
}
inline void ServerReqMsg::set_allocated_msg(::tutorial::ServerReqMsg_Msg* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:tutorial.ServerReqMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::tutorial::ServerReqMsg_ReqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tutorial::ServerReqMsg_ReqType>() {
  return ::tutorial::ServerReqMsg_ReqType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_server_5fmsg_2eproto
